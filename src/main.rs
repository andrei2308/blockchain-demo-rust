use std::str::FromStr;
use blockchain::{Blockchain};
use miner::Miner;
use ethereum_types::{Address, U256};
use crate::evm::ContractUtils;

mod blockchain;
mod block;
mod evm;
mod miner;
mod account;
mod transaction;
mod rpc_server;

use rpc_server::RpcServer;

#[tokio::main]
async fn main() {
    println!("Starting Blockchain RPC Server...");

    let mut blockchain = setup_blockchain_with_contract().await;

    let miner_address = Address::from([0x64u8; 20]);
    let miner = Miner::new(miner_address);

    setup_test_accounts(&mut blockchain);

    // Create and start RPC server
    let rpc_server = RpcServer::new(blockchain, miner);
    rpc_server.start(8545).await; // Standard Ethereum RPC port
}

async fn setup_blockchain_with_contract() -> Blockchain {
    let mut blockchain = Blockchain::new();

    let deployer = Address::from([0x11u8; 20]);
    blockchain.state.set_balance(&deployer, U256::from(1_000_000_000_000_000_000u64));

    let contract_bytecode_hex = "0x608060405234801561000f575f5ffd5b506040516119a63803806119a68339818101604052810190610031919061033f565b338383816003908161004391906105d7565b50806004908161005391906105d7565b5050505f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036100c6575f6040517f1e4fbdf70000000000000000000000000000000000000000000000000000000081526004016100bd91906106e5565b60405180910390fd5b6100d5816100f960201b60201c565b5080600560146101000a81548160ff021916908360ff1602179055505050506106fe565b5f60055f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508160055f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b5f604051905090565b5f5ffd5b5f5ffd5b5f5ffd5b5f5ffd5b5f601f19601f8301169050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b61021b826101d5565b810181811067ffffffffffffffff8211171561023a576102396101e5565b5b80604052505050565b5f61024c6101bc565b90506102588282610212565b919050565b5f67ffffffffffffffff821115610277576102766101e5565b5b610280826101d5565b9050602081019050919050565b8281835e5f83830152505050565b5f6102ad6102a88461025d565b610243565b9050828152602081018484840111156102c9576102c86101d1565b5b6102d484828561028d565b509392505050565b5f82601f8301126102f0576102ef6101cd565b5b815161030084826020860161029b565b91505092915050565b5f60ff82169050919050565b61031e81610309565b8114610328575f5ffd5b50565b5f8151905061033981610315565b92915050565b5f5f5f60608486031215610356576103556101c5565b5b5f84015167ffffffffffffffff811115610373576103726101c9565b5b61037f868287016102dc565b935050602084015167ffffffffffffffff8111156103a05761039f6101c9565b5b6103ac868287016102dc565b92505060406103bd8682870161032b565b9150509250925092565b5f81519050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f600282049050600182168061041557607f821691505b602082108103610428576104276103d1565b5b50919050565b5f819050815f5260205f209050919050565b5f6020601f8301049050919050565b5f82821b905092915050565b5f6008830261048a7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8261044f565b610494868361044f565b95508019841693508086168417925050509392505050565b5f819050919050565b5f819050919050565b5f6104d86104d36104ce846104ac565b6104b5565b6104ac565b9050919050565b5f819050919050565b6104f1836104be565b6105056104fd826104df565b84845461045b565b825550505050565b5f5f905090565b61051c61050d565b6105278184846104e8565b505050565b5b8181101561054a5761053f5f82610514565b60018101905061052d565b5050565b601f82111561058f576105608161042e565b61056984610440565b81016020851015610578578190505b61058c61058485610440565b83018261052c565b50505b505050565b5f82821c905092915050565b5f6105af5f1984600802610594565b1980831691505092915050565b5f6105c783836105a0565b9150826002028217905092915050565b6105e0826103c7565b67ffffffffffffffff8111156105f9576105f86101e5565b5b61060382546103fe565b61060e82828561054e565b5f60209050601f83116001811461063f575f841561062d578287015190505b61063785826105bc565b86555061069e565b601f19841661064d8661042e565b5f5b828110156106745784890151825560018201915060208501945060208101905061064f565b86831015610691578489015161068d601f8916826105a0565b8355505b6001600288020188555050505b505050505050565b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f6106cf826106a6565b9050919050565b6106df816106c5565b82525050565b5f6020820190506106f85f8301846106d6565b92915050565b61129b8061070b5f395ff3fe608060405234801561000f575f5ffd5b50600436106100e8575f3560e01c8063715018a61161008a578063a9059cbb11610064578063a9059cbb14610238578063dd62ed3e14610268578063f2fde38b14610298578063fca3b5aa146102b4576100e8565b8063715018a6146101f25780638da5cb5b146101fc57806395d89b411461021a576100e8565b806323b872dd116100c657806323b872dd14610158578063313ce5671461018857806340c10f19146101a657806370a08231146101c2576100e8565b806306fdde03146100ec578063095ea7b31461010a57806318160ddd1461013a575b5f5ffd5b6100f46102d0565b6040516101019190610eac565b60405180910390f35b610124600480360381019061011f9190610f5d565b610360565b6040516101319190610fb5565b60405180910390f35b610142610382565b60405161014f9190610fdd565b60405180910390f35b610172600480360381019061016d9190610ff6565b61038b565b60405161017f9190610fb5565b60405180910390f35b6101906103b9565b60405161019d9190611061565b60405180910390f35b6101c060048036038101906101bb9190610f5d565b6103cf565b005b6101dc60048036038101906101d7919061107a565b61046c565b6040516101e99190610fdd565b60405180910390f35b6101fa6104b1565b005b6102046104c4565b60405161021191906110b4565b60405180910390f35b6102226104ec565b60405161022f9190610eac565b60405180910390f35b610252600480360381019061024d9190610f5d565b61057c565b60405161025f9190610fb5565b60405180910390f35b610282600480360381019061027d91906110cd565b61059e565b60405161028f9190610fdd565b60405180910390f35b6102b260048036038101906102ad919061107a565b610620565b005b6102ce60048036038101906102c9919061107a565b6106a4565b005b6060600380546102df90611138565b80601f016020809104026020016040519081016040528092919081815260200182805461030b90611138565b80156103565780601f1061032d57610100808354040283529160200191610356565b820191905f5260205f20905b81548152906001019060200180831161033957829003601f168201915b5050505050905090565b5f5f61036a6106ef565b90506103778185856106f6565b600191505092915050565b5f600254905090565b5f5f6103956106ef565b90506103a2858285610708565b6103ad85858561079b565b60019150509392505050565b5f600560149054906101000a900460ff16905090565b60065f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461045e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610455906111b2565b60405180910390fd5b610468828261088b565b5050565b5f5f5f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20549050919050565b6104b961090a565b6104c25f610991565b565b5f60055f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6060600480546104fb90611138565b80601f016020809104026020016040519081016040528092919081815260200182805461052790611138565b80156105725780601f1061054957610100808354040283529160200191610572565b820191905f5260205f20905b81548152906001019060200180831161055557829003601f168201915b5050505050905090565b5f5f6105866106ef565b905061059381858561079b565b600191505092915050565b5f60015f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2054905092915050565b61062861090a565b5f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610698575f6040517f1e4fbdf700000000000000000000000000000000000000000000000000000000815260040161068f91906110b4565b60405180910390fd5b6106a181610991565b50565b6106ac61090a565b8060065f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b5f33905090565b6107038383836001610a54565b505050565b5f610713848461059e565b90507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8110156107955781811015610786578281836040517ffb8f41b200000000000000000000000000000000000000000000000000000000815260040161077d939291906111d0565b60405180910390fd5b61079484848484035f610a54565b5b50505050565b5f73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff160361080b575f6040517f96c6fd1e00000000000000000000000000000000000000000000000000000000815260040161080291906110b4565b60405180910390fd5b5f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160361087b575f6040517fec442f0500000000000000000000000000000000000000000000000000000000815260040161087291906110b4565b60405180910390fd5b610886838383610c23565b505050565b5f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036108fb575f6040517fec442f050000000000000000000000000000000000000000000000000000000081526004016108f291906110b4565b60405180910390fd5b6109065f8383610c23565b5050565b6109126106ef565b73ffffffffffffffffffffffffffffffffffffffff166109306104c4565b73ffffffffffffffffffffffffffffffffffffffff161461098f576109536106ef565b6040517f118cdaa700000000000000000000000000000000000000000000000000000000815260040161098691906110b4565b60405180910390fd5b565b5f60055f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508160055f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b5f73ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1603610ac4575f6040517fe602df05000000000000000000000000000000000000000000000000000000008152600401610abb91906110b4565b60405180910390fd5b5f73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610b34575f6040517f94280d62000000000000000000000000000000000000000000000000000000008152600401610b2b91906110b4565b60405180910390fd5b8160015f8673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20819055508015610c1d578273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92584604051610c149190610fdd565b60405180910390a35b50505050565b5f73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610c73578060025f828254610c679190611232565b92505081905550610d41565b5f5f5f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2054905081811015610cfc578381836040517fe450d38c000000000000000000000000000000000000000000000000000000008152600401610cf3939291906111d0565b60405180910390fd5b8181035f5f8673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2081905550505b5f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610d88578060025f8282540392505081905550610dd2565b805f5f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f82825401925050819055505b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef83604051610e2f9190610fdd565b60405180910390a3505050565b5f81519050919050565b5f82825260208201905092915050565b8281835e5f83830152505050565b5f601f19601f8301169050919050565b5f610e7e82610e3c565b610e888185610e46565b9350610e98818560208601610e56565b610ea181610e64565b840191505092915050565b5f6020820190508181035f830152610ec48184610e74565b905092915050565b5f5ffd5b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f610ef982610ed0565b9050919050565b610f0981610eef565b8114610f13575f5ffd5b50565b5f81359050610f2481610f00565b92915050565b5f819050919050565b610f3c81610f2a565b8114610f46575f5ffd5b50565b5f81359050610f5781610f33565b92915050565b5f5f60408385031215610f7357610f72610ecc565b5b5f610f8085828601610f16565b9250506020610f9185828601610f49565b9150509250929050565b5f8115159050919050565b610faf81610f9b565b82525050565b5f602082019050610fc85f830184610fa6565b92915050565b610fd781610f2a565b82525050565b5f602082019050610ff05f830184610fce565b92915050565b5f5f5f6060848603121561100d5761100c610ecc565b5b5f61101a86828701610f16565b935050602061102b86828701610f16565b925050604061103c86828701610f49565b9150509250925092565b5f60ff82169050919050565b61105b81611046565b82525050565b5f6020820190506110745f830184611052565b92915050565b5f6020828403121561108f5761108e610ecc565b5b5f61109c84828501610f16565b91505092915050565b6110ae81610eef565b82525050565b5f6020820190506110c75f8301846110a5565b92915050565b5f5f604083850312156110e3576110e2610ecc565b5b5f6110f085828601610f16565b925050602061110185828601610f16565b9150509250929050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f600282049050600182168061114f57607f821691505b6020821081036111625761116161110b565b5b50919050565b7f4f6e6c79206d696e7465722063616e206d696e7420746f6b656e7300000000005f82015250565b5f61119c601b83610e46565b91506111a782611168565b602082019050919050565b5f6020820190508181035f8301526111c981611190565b9050919050565b5f6060820190506111e35f8301866110a5565b6111f06020830185610fce565b6111fd6040830184610fce565b949350505050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f61123c82610f2a565b915061124783610f2a565b925082820190508082111561125f5761125e611205565b5b9291505056fea2646970667358221220b1ddada0abc35f60ac9711a40b9d412bef06968773c65f027c9185803ada2b3b64736f6c634300081c0033";

    println!("Deploying contract to blockchain...");

    let miner_address = Address::from([0x64u8; 20]);
    let miner = Miner::new(miner_address);

    deploy_contract(&mut blockchain, &miner, deployer, contract_bytecode_hex);


    blockchain
}

fn setup_test_accounts(blockchain: &mut Blockchain) {
    println!("Setting up test accounts...");

    let test_accounts = vec![
        Address::from_str("0x95fd8bdd071f25a1baE9086b6f95Eeda9c3EBB78").unwrap(), // Deployer
        Address::from([0x22u8; 20]),
        Address::from([0x33u8; 20]),
        Address::from([0x44u8; 20]), 
        Address::from([0x64u8; 20]), // Miner
    ];

    for account in test_accounts {
        blockchain.state.set_balance(&account, U256::from(100_000_000_000_000_000_00u64));
        println!("   • 0x{}: 100 ETH", hex::encode(account.as_bytes()));
    }
}

fn deploy_contract(
    blockchain: &mut Blockchain,
    miner: &Miner,
    from: Address,
    contract_bytecode_hex: &str
) {
    println!("Deploying contract...");

    let contract_bytecode = hex::decode(contract_bytecode_hex.trim_start_matches("0x"))
        .expect("Invalid hex bytecode");

    let constructor_params = create_constructor_params();
    let full_bytecode = [contract_bytecode, constructor_params].concat();

    let nonce = blockchain.state.get_nonce(&from);
    let contract_address = ContractUtils::calculate_create_address(&from, nonce);

    let mut deploy_tx = transaction::Transaction::new_contract_deployment(from, full_bytecode, U256::zero(), nonce);
    deploy_tx.gas_limit = 15_000_000;
    deploy_tx.set_hash();

    match miner.mine_block(blockchain, vec![deploy_tx], 2) {
        Ok(_) => {
            let deployed_code = blockchain.state.get_contract_code(&contract_address);
            if !deployed_code.is_empty() {
                println!("Contract deployed at: 0x{}", hex::encode(contract_address.as_bytes()));
                blockchain.state.increment_nonce(&from);
            } else {
                println!("Contract deployment failed");
            }
        }
        Err(e) => println!("Deployment error: {}", e),
    }
}

fn create_constructor_params() -> Vec<u8> {
    let name = "USD";
    let symbol = "USD";
    let decimals = 18u8;

    let mut params = Vec::new();

    let name_offset = 96u32;
    let symbol_offset = name_offset + 64;

    params.extend_from_slice(&[0u8; 28]);
    params.extend_from_slice(&name_offset.to_be_bytes());
    params.extend_from_slice(&[0u8; 28]);
    params.extend_from_slice(&symbol_offset.to_be_bytes());
    params.extend_from_slice(&[0u8; 31]);
    params.push(decimals);

    params.extend_from_slice(&[0u8; 28]);
    params.extend_from_slice(&(name.len() as u32).to_be_bytes());
    params.extend_from_slice(name.as_bytes());
    let name_padding = 32 - (name.len() % 32);
    if name_padding != 32 {
        params.extend_from_slice(&vec![0u8; name_padding]);
    }

    params.extend_from_slice(&[0u8; 28]);
    params.extend_from_slice(&(symbol.len() as u32).to_be_bytes());
    params.extend_from_slice(symbol.as_bytes());
    let symbol_padding = 32 - (symbol.len() % 32);
    if symbol_padding != 32 {
        params.extend_from_slice(&vec![0u8; symbol_padding]);
    }

    params
}